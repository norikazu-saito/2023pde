// parameters
int n = atoi(ARGV[2]); // % freefem++ mk_domain1.edp 5
real hsize;
// DBC --> label odd ,  RBC --> label even
border G1(t = 0, 3) {x = t; y = 0; label=1;}
border G2(t = 0, pi/2) {x = 3*cos(t); y = 3*sin(t); label=2;}
border G3(t = 0, 3) {x = 0; y = 3 - t; label=5;}
border G4(t = 0, 2*pi) {x = 1.9 + 0.8*cos(t); y = 0.9 - 0.8*sin(t);label=7;}
border G5(t = 0, 2*pi) {x = 0.7 + 0.5*cos(t); y = 2.3 - 0.5*sin(t);label=9;}
// triangulation
mesh Th = buildmesh(G1(n)+G2(2*n)+G3(n)+G4(2*n)+G5(n));
// FE space
fespace Vh(Th, P1);
Vh hh= hTriangle;
hsize = hh[].max;
cout << "hsize= " + hsize + endl;
/********************  For output  ********************/
// geometry
plot(Th,wait=1,ps="mk_domain1.ps");
// get total nums
int Nn=Th.nv, Ne=Th.nt, Nb=Th.nbe, NbR=0, NbD=0, k;
for(k=0;k<Nb;k++){
  if(Th.be(k).label %2 == 0) NbR++;
  else NbD++;
}
ofstream ff("mk_domain1.dat");
ff<<Nn<<" "<<Ne<<" "<<NbR<<" "<<NbD<<endl;
// np->xy, el->np, nbe->np
// indexing starts from 0 in FreeFEM++ but from 1 when "savemesh"ing
for(k=0;k<Nn;k++) ff<<Th(k).x<<" "<<Th(k).y<<" "<<Th(k).label<<" 0"<<endl;
for(k=0;k<Ne;k++) ff<<Th[k][0]+1<<" "<<Th[k][1]+1<<" "<<Th[k][2]+1<<" "<<Th[k].label<<endl;
for(k=0;k<Nb;k++){
  if(Th.be(k).label %2 == 0){
    ff<<Th.be(k)[0]+1<<" "<<Th.be(k)[1]+1<<" "<<Th.be(k).label<<" 0"<<endl;
  }
}
for(k=0;k<Nb;k++){
  if(Th.be(k).label %2 != 0){
    ff<<Th.be(k)[0]+1<<" "<<Th.be(k)[1]+1<<" "<<Th.be(k).label<<" 0"<<endl;
  }
}
